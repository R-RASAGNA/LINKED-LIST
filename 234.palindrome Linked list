class Solution {
    public ListNode reverse(ListNode cur) {
        ListNode prev = null;
        ListNode nxt = null;

        while (cur != null) {
            nxt = cur.next;
            cur.next = prev;
            prev = cur;
            cur = nxt;
        }

        return prev;
    }

    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) {
            return true;
        }

        ListNode s = head;
        ListNode f = head;

        // Move 'f' by two steps and 's' by one step to find the middle of the list
        while (f != null && f.next != null) {
            s = s.next;
            f = f.next.next;
        }

        // Reverse the second half of the list starting from 's'
        ListNode h2 = reverse(s);
        ListNode h1 = head;

        boolean isPalindrome = true;

        // Compare the first half with the reversed second half
        ListNode h2Copy = h2;  // Save a reference to restore the second half later
        while (h2 != null) {
            if (h1.val != h2.val) {
                isPalindrome = false;
                break;
            }
            h1 = h1.next;
            h2 = h2.next;
        }

        // Restore the second half of the list (reverse it back to original order)
        reverse(h2Copy);

        return isPalindrome;
    }
}
